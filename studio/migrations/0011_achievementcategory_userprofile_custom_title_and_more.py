# Generated by Django 5.2.1 on 2025-07-26 19:01

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('studio', '0010_achievement_userprofile_account_level_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AchievementCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('icon', models.CharField(default='fas fa-trophy', max_length=50)),
                ('color', models.CharField(default='#FFD700', max_length=7)),
            ],
            options={
                'verbose_name_plural': 'Achievement Categories',
            },
        ),
        migrations.AddField(
            model_name='userprofile',
            name='custom_title',
            field=models.CharField(blank=True, help_text='Custom title to display on profile', max_length=100),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='favorite_genres',
            field=models.CharField(blank=True, help_text='Comma-separated list of favorite game genres', max_length=200),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='gaming_hours_weekly',
            field=models.IntegerField(default=0, help_text='Average gaming hours per week'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='gaming_style',
            field=models.CharField(blank=True, choices=[('casual', 'Casual Gamer'), ('hardcore', 'Hardcore Gamer'), ('competitive', 'Competitive Player'), ('story_lover', 'Story Enthusiast'), ('multiplayer', 'Multiplayer Focused'), ('indie_supporter', 'Indie Game Supporter')], default='casual', max_length=50),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='is_profile_public',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='preferred_platforms',
            field=models.CharField(blank=True, help_text='Comma-separated list of preferred gaming platforms', max_length=200),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='profile_banner',
            field=models.ImageField(blank=True, null=True, upload_to='profile_banners/'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='theme_preference',
            field=models.CharField(choices=[('dark', 'Dark Theme'), ('light', 'Light Theme'), ('auto', 'Auto Theme'), ('gaming', 'Gaming Theme'), ('neon', 'Neon Theme')], default='dark', max_length=20),
        ),
        migrations.CreateModel(
            name='FeaturedAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('display_order', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studio.achievement')),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='studio.userprofile')),
            ],
            options={
                'ordering': ['display_order'],
                'unique_together': {('user_profile', 'achievement')},
            },
        ),
        migrations.AddField(
            model_name='userprofile',
            name='featured_achievements',
            field=models.ManyToManyField(blank=True, related_name='featured_by_users', through='studio.FeaturedAchievement', to='studio.achievement'),
        ),
        migrations.CreateModel(
            name='GameReview',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('is_recommended', models.BooleanField(default=True)),
                ('playtime_hours', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='studio.game')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'unique_together': {('user', 'game')},
            },
        ),
        migrations.CreateModel(
            name='GameSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('duration_minutes', models.PositiveIntegerField(help_text='Session duration in minutes')),
                ('experience_gained', models.IntegerField(default=0)),
                ('achievements_unlocked', models.ManyToManyField(blank=True, to='studio.achievement')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='play_sessions', to='studio.game')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_sessions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MilestoneAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('target_value', models.PositiveIntegerField()),
                ('current_value', models.PositiveIntegerField(default=0)),
                ('achievement_type', models.CharField(choices=[('donations', 'Total Donations'), ('playtime', 'Total Playtime'), ('achievements', 'Achievements Earned'), ('social', 'Social Interactions'), ('reviews', 'Reviews Written')], max_length=50)),
                ('is_completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('reward_experience', models.PositiveIntegerField(default=100)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserFollow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following_relationships', to=settings.AUTH_USER_MODEL)),
                ('following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follower_relationships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('follower', 'following')},
            },
        ),
        migrations.AddField(
            model_name='userprofile',
            name='followers',
            field=models.ManyToManyField(related_name='following_users', through='studio.UserFollow', to='studio.userprofile'),
        ),
        migrations.CreateModel(
            name='ReviewLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='studio.gamereview')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'review')},
            },
        ),
        migrations.CreateModel(
            name='UserGameStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_playtime_hours', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('sessions_count', models.PositiveIntegerField(default=0)),
                ('achievements_earned', models.PositiveIntegerField(default=0)),
                ('favorite_game', models.BooleanField(default=False)),
                ('rating', models.PositiveIntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], null=True)),
                ('last_played', models.DateTimeField(blank=True, null=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_stats', to='studio.game')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_stats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'game')},
            },
        ),
    ]
